openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Student Management
  description: APIs for managing student information
paths:
  /api/students/{id}:
    get:
      tags:
      - Student Management
      summary: Get student by ID
      description: Retrieves a specific student by their ID
      operationId: getStudentById
      parameters:
      - name: id
        in: path
        description: ID of the student to retrieve
        required: true
        schema:
          type: integer
          format: int64
        example: 1
      responses:
        "200":
          description: Student found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentDTO"
              examples:
                student:
                  summary: Student details
                  description: student
                  value:
                    id: 1
                    firstName: John
                    lastName: Doe
                    email: john.doe@example.com
                    dateOfBirth: 2000-01-01
                    status: ACTIVE
                    studentId: ST123456
        "404":
          description: Student not found
          content:
            application/json:
              examples:
                error:
                  summary: Error response
                  description: error
                  value:
                    status: 404
                    message: "Student not found with id: 1"
                    timestamp: 2023-11-08T12:00:00Z
    put:
      tags:
      - Student Management
      summary: Update student
      description: Updates an existing student's information
      operationId: updateStudent
      parameters:
      - name: id
        in: path
        description: ID of the student to update
        required: true
        schema:
          type: integer
          format: int64
        example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentDTO"
        required: true
      responses:
        "200":
          description: Student updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentDTO"
              examples:
                updatedStudent:
                  summary: Updated student
                  description: updatedStudent
                  value:
                    id: 1
                    firstName: John
                    lastName: Doe
                    email: john.doe@example.com
                    dateOfBirth: 2000-01-01
                    status: GRADUATED
                    studentId: ST123456
        "404":
          description: Student not found
          content:
            application/json:
              examples:
                error:
                  summary: Error response
                  description: error
                  value:
                    status: 404
                    message: "Student not found with id: 1"
                    timestamp: 2023-11-08T12:00:00Z
        "400":
          description: Invalid input data
          content:
            application/json:
              examples:
                validationError:
                  summary: Validation error response
                  description: validationError
                  value:
                    status: 400
                    message: Validation failed
                    timestamp: 2023-11-08T12:00:00Z
                    errors:
                      email: Invalid email format
                      status: Status is required
    delete:
      tags:
      - Student Management
      summary: Delete student
      description: Deletes a student from the system
      operationId: deleteStudent
      parameters:
      - name: id
        in: path
        description: ID of the student to delete
        required: true
        schema:
          type: integer
          format: int64
        example: 1
      responses:
        "204":
          description: Student deleted successfully
        "404":
          description: Student not found
          content:
            application/json:
              examples:
                error:
                  summary: Error response
                  description: error
                  value:
                    status: 404
                    message: "Student not found with id: 1"
                    timestamp: 2023-11-08T12:00:00Z
  /api/students:
    get:
      tags:
      - Student Management
      summary: Get all students
      description: Retrieves a list of all students in the system
      operationId: getAllStudents
      responses:
        "200":
          description: Successfully retrieved all students
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentDTO"
              examples:
                students:
                  summary: List of students
                  description: students
                  value:
                  - id: 1
                    firstName: John
                    lastName: Doe
                    email: john.doe@example.com
                    dateOfBirth: 2000-01-01
                    status: ACTIVE
                    studentId: ST123456
                  - id: 2
                    firstName: Jane
                    lastName: Smith
                    email: jane.smith@example.com
                    dateOfBirth: 2001-02-15
                    status: ACTIVE
                    studentId: ST789012
    post:
      tags:
      - Student Management
      summary: Create new student
      description: Creates a new student record
      operationId: createStudent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentDTO"
        required: true
      responses:
        "201":
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentDTO"
              examples:
                student:
                  summary: Created student
                  description: student
                  value:
                    id: 1
                    firstName: John
                    lastName: Doe
                    email: john.doe@example.com
                    dateOfBirth: 2000-01-01
                    status: ACTIVE
                    studentId: ST123456
        "400":
          description: Invalid input data
          content:
            application/json:
              examples:
                validationError:
                  summary: Validation error response
                  description: validationError
                  value:
                    status: 400
                    message: Validation failed
                    timestamp: 2023-11-08T12:00:00Z
                    errors:
                      firstName: First name is required
                      email: Invalid email format
components:
  schemas:
    StudentDTO:
      type: object
      description: Student Data Transfer Object
      example:
        id: 1
        firstName: John
        lastName: Doe
        email: john.doe@example.com
        dateOfBirth: 2000-01-01
        status: ACTIVE
        studentId: ST123456
      properties:
        id:
          type: integer
          format: int32
          description: Student's unique identifier
          example: 1
          minimum: 1
          readOnly: true
        firstName:
          type: string
          description: Student's first name
          example: John
          maxLength: 50
          minLength: 2
          pattern: "^[a-zA-Z]+$"
        lastName:
          type: string
          description: Student's last name
          example: Doe
          maxLength: 50
          minLength: 2
          pattern: "^[a-zA-Z]+$"
        email:
          type: string
          description: Student's email address
          example: john.doe@example.com
          pattern: "^[A-Za-z0-9+_.-]+@(.+)$"
        dateOfBirth:
          type: string
          format: date
          description: Student's date of birth
          example: 2000-01-01
        status:
          type: string
          description: Student's current status
          enum:
          - ACTIVE
          - INACTIVE
          - GRADUATED
          - SUSPENDED
          example: ACTIVE
        studentId:
          type: string
          description: Student's unique ID number
          example: ST123456
          pattern: "^[A-Z]{2}\\d{6}$"
      required:
      - dateOfBirth
      - email
      - firstName
      - lastName
      - status
      - studentId
